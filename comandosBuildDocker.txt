Para ms-python:
Copiar código
docker build -t ms-python-desarrollo-devops --build-arg ENTORNO_ENV=desarrollo ./ms-python
docker build -t ms-python-produccion-devops --build-arg ENTORNO_ENV=produccion ./ms-python

Para ms-nestjs-security:
Copiar código
docker build -t ms-nestjs-security-desarrollo-devops --build-arg ENTORNO_ENV=desarrollo ./ms-nestjs-security
docker build -t ms-nestjs-security-produccion-devops --build-arg ENTORNO_ENV=produccion ./ms-nestjs-security

Para ms-nestjs-bff:
Copiar código
docker build -t ms-nestjs-bff-desarrollo-devops --build-arg ENTORNO_ENV=desarrollo ./ms-nestjs-bff
docker build -t ms-nestjs-bff-produccion-devops --build-arg ENTORNO_ENV=produccion ./ms-nestjs-bff


PARA FRONTEND
docker build -t proyecto-frontapp-desarrollo-devops --build-arg VITE_ENTORNO=desarrollo ./proyecto-frontApp
docker build -t proyecto-frontapp-produccion-devops --build-arg VITE_ENTORNO=produccion ./proyecto-frontApp

docker build --no-cache -t proyecto-frontapp-desarrollo-devops --build-arg VITE_ENTORNO=desarrollo ./proyecto-frontApp
docker build --no-cache -t proyecto-frontapp-produccion-devops --build-arg VITE_ENTORNO=produccion ./proyecto-frontApp

**********************************************************************************************************
Comandos para Port Forward
Ejecución simultánea
Si deseas ejecutar todos los comandos en paralelo, puedes abrir varias terminales o utilizar un solo comando en el fondo con &:

PARA CADA TERMINAL
kubectl port-forward deployment/ms-python-desarrollo 32000:3000
kubectl port-forward deployment/ms-nestjs-security 32001:3001
kubectl port-forward deployment/ms-nestjs-bff 32002:3002
kubectl port-forward deployment/proyecto-frontapp-desarrollo 32003:80


bash
Copiar código
kubectl port-forward deployment/ms-python-desarrollo 32000:3000 &
kubectl port-forward deployment/ms-nestjs-security 32001:3001 &
kubectl port-forward deployment/ms-nestjs-bff 32002:3002 &
kubectl port-forward deployment/proyecto-frontapp-desarrollo 32003:80 &
kubectl port-forward deployment/pgadmin-deployment 30200:80 &



Limpiar recursos de Kubernetes sin eliminar Minikube (Opción 1):
# Eliminar todos los pods, deployments y servicios
kubectl delete all --all -n default

# Eliminar los Secrets y ConfigMaps
kubectl delete secrets --all -n default
kubectl delete configmaps --all -n default

# Eliminar PersistentVolumeClaims (PVC)
kubectl delete pvc --all -n default

# Eliminar PersistentVolumes (PV)
kubectl delete pv --all

# Eliminar Namespaces personalizados (si tienes más de uno, reemplaza <namespace_name> con el nombre del namespace)
kubectl delete namespace <namespace_name>

Eliminar Minikube completamente y recrearlo (Opción 2):
# Detener Minikube
minikube stop

# Eliminar Minikube y sus configuraciones
minikube delete --purge

# Reiniciar un nuevo clúster Minikube
minikube start

#ACTIVAR LA VARIABLE DE ENTORNO
minikube docker-env


APIS
https://www.freepublicapis.com/tags/development

JENKINS-FILES:
https://downloads.apache.org/maven/

https://www.jenkins.io/

https://hub.docker.com/r/jenkins/jenkins

https://github.com/jenkinsci/docker/blob/master/README.md



SOLUCION ERROR DOCKER LOCAL

sudo nano /etc/resolv.conf
nameserver 8.8.8.8
nameserver 8.8.4.4



Ejecutar Jenkins directamente con Docker

# Reinicia el servicio Docker para asegurar que todo está funcionando correctamente.
sudo systemctl restart docker 

# Ejecuta Jenkins con la imagen oficial, mapeando los puertos necesarios:
# - 8080: Interfaz web de Jenkins
# - 50000: Puerto para agentes de Jenkins (conectar nodos)
# - --restart=on-failure: Reinicia el contenedor en caso de fallos.
docker run -p 8080:8080 -p 50000:50000 --restart=on-failure jenkins/jenkins:lts-jdk17

Opción 2: Desplegar Jenkins en Kubernetes
# Construye una imagen de Jenkins personalizada, etiquetada como `jenkin:latest`.
docker build -t jenkin:latest .

kubectl apply -f jenkins-clusterrole.yaml
kubectl apply -f jenkins-clusterrolebinding.yaml
kubectl apply -f jenkins-deployment.yaml
kubectl apply -f jenkins-role.yaml
kubectl apply -f jenkins-rolebinding.yaml
kubectl apply -f jenkins-service-account.yaml
kubectl apply -f jenkins-pvc.yaml
kubectl apply -f jenkins-service.yaml


# Redirige localmente el puerto 8080 para acceder a la interfaz web de Jenkins.
kubectl port-forward service/jenkins-service 8080:8080

# Obtén la contraseña inicial de administrador desde el pod de Jenkins.
kubectl exec -it <nombre-del-pod> -- cat /var/jenkins_home/secrets/initialAdminPassword

# Detén Minikube si ya está corriendo.
minikube stop

# Reinicia el servicio Docker.
sudo systemctl restart docker

# Ejecuta Jenkins en modo contenedor con almacenamiento persistente.
docker run -d --name jenkins -p 8080:8080 -p 50000:50000 -v jenkins_home:/var/jenkins_home jenkins/jenkins:alpine

# Obtén la configuración del clúster de Kubernetes desde dentro del pod.
# Esto puede ser útil para configurar herramientas adicionales dentro de Jenkins.
kubectl exec -it <nombre-del-pod> -- cat /root/.kube/config

# Redirige el puerto local 8080 al puerto 8080 del Service de Jenkins, para permitir el acceso
# a la interfaz web desde tu máquina local.
kubectl port-forward service/jenkins-service 8080:8080


Plugins recomendados para Jenkins según tu proyecto
MS-PYTHON
Python Plugin: Para ejecutar scripts y pruebas en Python. (LISTO)
ShiningPanda Plugin: Configura entornos de Python virtuales. (LISTO)
Cobertura: Para el análisis de cobertura de pruebas en proyectos de Python. (LISTO)

MS-NESTJS-SECURITY y MS-NESTJS-BFF
NodeJS Plugin: Permite trabajar con pipelines que usan Node.js.   (LISTO)
Pipeline Utility Steps: Útil para manipular archivos YAML o JSON.    (LISTO)
JUnit Plugin: Para reportar resultados de pruebas automatizadas, como las de jest. (LISTO)
Proyecto-frontApp
HTML Publisher Plugin: Publica reportes generados de herramientas frontend. (LISTO)
GitHub Plugin: Conecta Jenkins con tu repositorio de frontend. (LISTO)
Build Pipeline Plugin: Organiza pasos de construcción y pruebas frontend. (LISTO)

OTROS PLUGIN:
Plugins esenciales para Jenkins y Kubernetes
Kubernetes Plugin
Permite que Jenkins se integre directamente con Kubernetes y ejecute builds en contenedores.

Pipeline Plugin
Para manejar pipelines declarativos como el Jenkinsfile.

Docker Pipeline Plugin
Permite trabajar con Docker directamente desde Jenkins pipelines.

Git Plugin
Para interactuar con repositorios Git.

GitHub Integration Plugin (opcional)
Si estás usando GitHub, este plugin facilita las interacciones.

Credentials Plugin
Ayuda a administrar credenciales seguras para Docker Hub, Kubernetes, etc.

Blue Ocean Plugin (opcional)
Proporciona una interfaz más amigable para visualizar pipelines.

Kubernetes CLI Plugin
Para ejecutar comandos kubectl desde Jenkins.


Flujo de trabajo automatizado
Construcción:
Configura un job para clonar los repositorios (MS-PYTHON, MS-NESTJS-SECURITY, etc.).
Realiza pruebas unitarias en cada microservicio.
Integración:
Usa un pipeline multietapa para orquestar pruebas de integración entre servicios.
Despliegue:
Integra un job que despliegue los servicios en Kubernetes o Docker Compose.
Notificación:
Configura notificaciones con plugins como Email Extension o Slack.




