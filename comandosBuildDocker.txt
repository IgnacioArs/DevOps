Para ms-python:
Copiar código
docker build -t ms-python-desarrollo-devops --build-arg ENTORNO_ENV=desarrollo ./ms-python
docker build -t ms-python-produccion-devops --build-arg ENTORNO_ENV=produccion ./ms-python

Para ms-nestjs-security:
Copiar código
docker build -t ms-nestjs-security-desarrollo-devops --build-arg ENTORNO_ENV=desarrollo ./ms-nestjs-security
docker build -t ms-nestjs-security-produccion-devops --build-arg ENTORNO_ENV=produccion ./ms-nestjs-security

Para ms-nestjs-bff:
Copiar código
docker build -t ms-nestjs-bff-desarrollo-devops --build-arg ENTORNO_ENV=desarrollo ./ms-nestjs-bff
docker build -t ms-nestjs-bff-produccion-devops --build-arg ENTORNO_ENV=produccion ./ms-nestjs-bff


PARA FRONTEND
docker build -t proyecto-frontapp-desarrollo-devops --build-arg VITE_ENTORNO=desarrollo ./proyecto-frontApp
docker build -t proyecto-frontapp-produccion-devops --build-arg VITE_ENTORNO=produccion ./proyecto-frontApp

docker build --no-cache -t proyecto-frontapp-desarrollo-devops --build-arg VITE_ENTORNO=desarrollo ./proyecto-frontApp
docker build --no-cache -t proyecto-frontapp-produccion-devops --build-arg VITE_ENTORNO=produccion ./proyecto-frontApp

**********************************************************************************************************
Comandos para Port Forward
Ejecución simultánea
Si deseas ejecutar todos los comandos en paralelo, puedes abrir varias terminales o utilizar un solo comando en el fondo con &:

PARA CADA TERMINAL
kubectl port-forward deployment/ms-python-desarrollo 32000:3000
kubectl port-forward deployment/ms-nestjs-security 32001:3001
kubectl port-forward deployment/ms-nestjs-bff 32002:3002
kubectl port-forward deployment/proyecto-frontapp-desarrollo 32003:80


bash
Copiar código
kubectl port-forward deployment/ms-python-desarrollo 32000:3000 &
kubectl port-forward deployment/ms-nestjs-security 32001:3001 &
kubectl port-forward deployment/ms-nestjs-bff 32002:3002 &
kubectl port-forward deployment/proyecto-frontapp-desarrollo 32003:80 &
kubectl port-forward deployment/pgadmin-deployment 30200:80 &



Limpiar recursos de Kubernetes sin eliminar Minikube (Opción 1):
# Eliminar todos los pods, deployments y servicios
kubectl delete all --all -n default

# Eliminar los Secrets y ConfigMaps
kubectl delete secrets --all -n default
kubectl delete configmaps --all -n default

# Eliminar PersistentVolumeClaims (PVC)
kubectl delete pvc --all -n default

# Eliminar PersistentVolumes (PV)
kubectl delete pv --all

# Eliminar Namespaces personalizados (si tienes más de uno, reemplaza <namespace_name> con el nombre del namespace)
kubectl delete namespace <namespace_name>

Eliminar Minikube completamente y recrearlo (Opción 2):
# Detener Minikube
minikube stop

# Eliminar Minikube y sus configuraciones
minikube delete --purge

# Reiniciar un nuevo clúster Minikube
minikube start

#ACTIVAR LA VARIABLE DE ENTORNO
minikube docker-env


APIS
https://www.freepublicapis.com/tags/development

JENKINS-FILES:
https://downloads.apache.org/maven/

https://www.jenkins.io/

https://hub.docker.com/r/jenkins/jenkins

https://github.com/jenkinsci/docker/blob/master/README.md



SOLUCION ERROR DOCKER LOCAL

sudo nano /etc/resolv.conf
nameserver 8.8.8.8
nameserver 8.8.4.4

sudo systemctl restart docker
docker run -p 8080:8080 -p 50000:50000 --restart=on-failure jenkins/jenkins:lts-jdk17  /CORRER JENKINS

OTRA OPCION SI LO MONTAMOS CON KUBERNETES 
1) CREAMOS EL deployment
2) LUEGO EL SERVICE Y LO EXPONEMO EN SU RESPECTIVO PUERTO
kubectl port-forward service/jenkins-service 8080:8080


minikube stop
sudo systemctl restart docker





