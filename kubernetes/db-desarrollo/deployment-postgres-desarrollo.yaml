apiVersion: apps/v1            # Define la versión de la API de Kubernetes para el Deployment. En este caso, usamos 'apps/v1' que es la versión estable para recursos de tipo Deployment.
kind: Deployment               # Especifica que este recurso es un Deployment, que se encarga de crear y gestionar pods.
metadata:
  name: deployment-postgres-desarrollo  # Nombre del Deployment. Esto es lo que se utiliza para identificar este recurso.
  labels:
    app: deployment-postgres-desarrollo
    # Etiqueta que se puede usar para organizar y filtrar recursos en Kubernetes.
spec:
  replicas: 1                   # Define el número de réplicas de pods que deseas. Aquí, solo se necesita una réplica de PostgreSQL.
  selector:
    matchLabels:
      app: deployment-postgres-desarrollo
      # El Deployment identifica y gestiona los pods que coinciden con estas etiquetas.
  template:                     
    # Plantilla que describe cómo deben ser los pods gestionados por este Deployment.
    metadata:
      labels:
        app: deployment-postgres-desarrollo
        # Las etiquetas se aplican a todos los pods que serán creados a partir de esta plantilla.
    spec:
      containers:
        - name: deployment-postgres-desarrollo
          # El nombre del contenedor dentro del pod.
          image: postgres:latest
          # La imagen de Docker que se usará para el contenedor de PostgreSQL. Aquí se usa la versión más reciente de PostgreSQL.
          imagePullPolicy: IfNotPresent
          # Define la política para extraer la imagen. Si la imagen ya está en el nodo, no se descargará de nuevo.
          ports:
            - containerPort: 5432
              # El puerto dentro del contenedor donde PostgreSQL escuchará las conexiones (puerto predeterminado de PostgreSQL).
          envFrom:
            - secretRef:
                name: postgres-secret-desarrollo
                # El contenedor obtendrá las variables de entorno desde un Secret que contiene configuraciones sensibles (como contraseñas y configuraciones de base de datos).
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgredb-desarrollo
              # El volumen persistente se monta en la ruta `/var/lib/postgresql/data` dentro del contenedor. Esto garantiza que los datos de PostgreSQL persistan incluso después de reiniciar el pod.
            - mountPath: /docker-entrypoint-initdb.d
              name: init-script
              # Monta un ConfigMap que contiene scripts de inicialización en PostgreSQL.
      volumes:
        - name: postgredb-desarrollo
          persistentVolumeClaim:
            claimName: postgres-claim-desarrollo
            # Utiliza un PersistentVolumeClaim (PVC) llamado `postgres-claim-desarrollo` para reclamar el almacenamiento persistente.
        - name: init-script
          configMap:
            name: configmap-postgres-desarrollo
            # Utiliza un ConfigMap llamado `configmap-postgres-desarrollo` para cargar los scripts de inicialización en el contenedor.
