apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
  labels:
    app: jenkins
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jenkins
  template:
    metadata:
      labels:
        app: jenkins
    spec:
      serviceAccountName: jenkins-sa  # Asegúrate de que este service account exista y tenga permisos adecuados
      containers:
      - name: jenkins
        image: jenkins:latest  # Aquí usas la imagen local que acabas de construir
        imagePullPolicy: Never  # No es necesario descargar la imagen, ya está construida localmente
        ports:
        - containerPort: 8080  # Puerto para la interfaz de Jenkins
        - containerPort: 50000  # Puerto para agentes remotos de Jenkins
        volumeMounts:
        - name: jenkins-home
          mountPath: /var/jenkins_home  # Donde se almacenan los datos persistentes de Jenkins
        - name: kubeconfig
          mountPath: /root/.kube/config  # Ruta en el contenedor para el kubeconfig
          subPath: config
        - name: docker-socket
          mountPath: /var/run/docker.sock  # Montar el socket Docker para acceso al daemon
        #env:
        #  - name: DOCKER_GID
        #    value: "989"  # Reemplaza con el GID que obtuviste del host
        #command: ["/bin/sh", "-c"]
        #args:
        #- >
        #  if ! getent group docker > /dev/null; then
        #    groupadd -g $DOCKER_GID docker;
        #  fi &&
        #  usermod -aG docker jenkins &&
        #  /usr/bin/tini -- /usr/local/bin/jenkins.sh;
        #securityContext:
        #  runAsUser: 0  # Ejecuta como root
        #  runAsGroup: 0 # Ejecuta como root
      volumes:
      - name: jenkins-home
        persistentVolumeClaim:
          claimName: jenkins-pvc  # Asegúrate de que el PVC "jenkins-pvc" esté configurado
      - name: kubeconfig
        configMap:
          name: kubeconfig-map  # El ConfigMap que contiene tu archivo kubeconfig
      - name: docker-socket
        hostPath:
          path: /var/run/docker.sock
          type: Socket






